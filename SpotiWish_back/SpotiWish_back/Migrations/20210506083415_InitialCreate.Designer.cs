// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpotiWish_back.Data;

namespace SpotiWish_back.Migrations
{
    [DbContext(typeof(SpotiWishDataContext))]
    [Migration("20210506083415_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14");

            modelBuilder.Entity("SpotiWish_back.Model.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArtistsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("BLOB");

                    b.Property<int>("TotalHeard")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("YearReleased")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ArtistsId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SpotiWish_back.Model.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("BackGroundThumbnail")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int?>("PlayListId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ProfilThumbnail")
                        .HasColumnType("BLOB");

                    b.Property<int>("TimeOfHeard")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayListId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("SpotiWish_back.Model.Music", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int?>("PlayListId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Style")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("BLOB");

                    b.Property<int>("TimeOfPlays")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("song")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PlayListId");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("SpotiWish_back.Model.PlayList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("SpotiWish_back.Model.SimpleArtistDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilThumbnail")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("SimpleArtistDTO");
                });

            modelBuilder.Entity("SpotiWish_back.Model.SimpleMusicDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("SimpleMusicDTO");
                });

            modelBuilder.Entity("SpotiWish_back.Model.SimplePlayListDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("BLOB");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SimplePlayListDTO");
                });

            modelBuilder.Entity("SpotiWish_back.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("Subscription")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SpotiWish_back.Model.Album", b =>
                {
                    b.HasOne("SpotiWish_back.Model.Artist", null)
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId");

                    b.HasOne("SpotiWish_back.Model.SimpleArtistDTO", "Artists")
                        .WithMany()
                        .HasForeignKey("ArtistsId");
                });

            modelBuilder.Entity("SpotiWish_back.Model.Artist", b =>
                {
                    b.HasOne("SpotiWish_back.Model.PlayList", null)
                        .WithMany("Artists")
                        .HasForeignKey("PlayListId");
                });

            modelBuilder.Entity("SpotiWish_back.Model.Music", b =>
                {
                    b.HasOne("SpotiWish_back.Model.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId");

                    b.HasOne("SpotiWish_back.Model.Artist", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("SpotiWish_back.Model.PlayList", null)
                        .WithMany("Musics")
                        .HasForeignKey("PlayListId");
                });

            modelBuilder.Entity("SpotiWish_back.Model.SimpleMusicDTO", b =>
                {
                    b.HasOne("SpotiWish_back.Model.Album", null)
                        .WithMany("Musics")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("SpotiWish_back.Model.SimplePlayListDTO", b =>
                {
                    b.HasOne("SpotiWish_back.Model.User", null)
                        .WithMany("Playlists")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
